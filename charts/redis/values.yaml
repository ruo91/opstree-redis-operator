---
redisStandalone:
  name: "redis"
  image: docker.io/ruo91/opstree-redis-fedora
  tag: v8.0.2
  imagePullPolicy: IfNotPresent
  imagePullSecrets: []
    # - name:  Secret with Registry credentials
  redisSecret:
    secretName: ""
    secretKey: ""
  serviceType: ClusterIP
  resources:
    requests:
      #cpu: 8
      memory: 32Gi
    limits:
      #cpu: 8
      memory: 32Gi
  ignoreAnnotations: []
    # - "redis.opstreelabs.in/ignore"
  minReadySeconds: 0
  # -- Some fields of statefulset are immutable, such as volumeClaimTemplates.
  # When set to true, the operator will delete the statefulset and recreate it. Default is false.
  recreateStatefulSetOnUpdateInvalid: false

labels: {}
#   foo: bar
#   test: echo

externalConfig:
  enabled: true
  data: |
    # Connection Management
    #protected-mode no
    maxclients 500000
    tcp-backlog 65535
    timeout 0
    tcp-keepalive 300
    
    # Memory Usage
    maxmemory 32gb
    maxmemory-policy allkeys-lru
    maxmemory-samples 10
    
    # Performance / Timing
    hz 500
    #dynamic-hz yes
    
    # Latency tuning
    latency-monitor-threshold 5
    slowlog-log-slower-than 15000
    slowlog-max-len 1024
    
    # Append only file rewrite settings
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 128mb
    
    # Advanced fd tuning
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit slave 128mb 64mb 60
    client-output-buffer-limit pubsub 256mb 64mb 60
    
    # Optimizing memory
    hash-max-ziplist-entries 1024
    hash-max-ziplist-value 256
    
    # When enabled, Redis evicts keys in a lazy (asynchronous) manner using background threads.
    # This reduces latency spikes during eviction by avoiding time-consuming deletions on the main thread.
    lazyfree-lazy-eviction yes
    
    # Enables lazy (asynchronous) deletion of expired keys.
    # Instead of removing keys synchronously when they expire, Redis defers the actual memory release to background threads.
    lazyfree-lazy-expire yes
    
    # When enabled, Redis performs DEL operations in a non-blocking way using background threads,
    # particularly for complex data types like lists, hashes, or sorted sets with many elements.
    lazyfree-lazy-server-del yes
    
    # Implementing Memory Defragmentation
    # Enables active memory defragmentation to reduce fragmentation in long-running Redis instances.
    # Helps reclaim fragmented memory and maintain performance stability over time.
    activedefrag yes
    
    # Multi-Threads
    io-threads-do-reads yes
    io-threads 4

externalService:
  enabled: true
  # annotations:
  #   foo: bar
  serviceType: NodePort
  port: 30011

serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s
  namespace: monitoring
  # -- extraLabels are added to the servicemonitor when enabled set to true
  extraLabels: {}
    # foo: bar
    # team: devops

redisExporter:
  enabled: true
  image: docker.io/ruo91/opstree-redis-exporter-fedora
  tag: "v1.74.0"
  imagePullPolicy: IfNotPresent
  resources: {}
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
  env: []
    # - name: VAR_NAME
    #   value: "value1"
  securityContext: {}

initContainer:
  enabled: false
  image: ""
  imagePullPolicy: "IfNotPresent"
  resources: {}
    # requests:
    #   memory: "64Mi"
    #   cpu: "250m"
    # limits:
    #   memory: "128Mi"
    #   cpu: "500m"
  env: []
  command: []
  args: []

sidecars:
  name: "redis-tools"
  image: "docker.io/ruo91/opstree-redis-tools-fedora:v8.0.2"
  imagePullPolicy: "IfNotPresent"
  #resources:
  #  limits:
  #    cpu: "100m"
  #    memory: "128Mi"
  #  requests:
  #    cpu: "50m"
  #    memory: "64Mi"
  env: []
    # - name: MY_ENV_VAR
    #   value: "my-env-var-value"

priorityClassName: ""

nodeSelector:
  node-role.kubernetes.io/worker: ""

storageSpec:
  volumeClaimTemplate:
    spec:
      storageClassName: redis-sc
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi
  #   selector: {}

podSecurityContext:
  runAsUser: 1000
  fsGroup: 1000

securityContext: {}

#affinity: {}
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-role.kubernetes.io/worker
          operator: Exists
          #values:
          #- ssd

tolerations: []
#tolerations:
#  - key: "node-role.kubernetes.io/worker"
#    operator: "Exists"
#    #value: "value"
#    effect: "NoSchedule"

serviceAccountName: "default"

TLS:
  ca: ca.key
  cert: tls.crt
  key: tls.key
  secret:
    secretName: ""

acl:
  secret:
    secretName: ""

env: []
  # - name: VAR_NAME
  #   value: "value1"
